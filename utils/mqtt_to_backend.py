import paho.mqtt.client as mqtt
import requests
import time

BACKEND_URL = "http://localhost:5000/api/mensaje"  # Endpoint backend

# Definici√≥n de t√≥picos
TOPICO_TEMPERATURA = "sensor/temperatura"
TOPICO_NOTIFICACIONES = "sistema/notificaciones"
TOPICO_VENTILADOR = "actuador/ventilador"
TOPICO_BOMBILLO = "actuador/bombillo"

# Lista de todos los t√≥picos a suscribirse
TOPICOS = [TOPICO_TEMPERATURA, TOPICO_NOTIFICACIONES, TOPICO_VENTILADOR, TOPICO_BOMBILLO]

BROKER = "192.168.196.202"
PUERTO = 9001  # Puerto WebSocket t√≠pico para MQTT
WEBSOCKETS_PATH = "/mqtt"  # Ruta WebSocket t√≠pica

def enviar_al_backend(topic, valor):
    data = {"topic": topic, "valor": valor}
    try:
        response = requests.post(BACKEND_URL, json=data, timeout=5)
        response.raise_for_status()
        print(f"üì§ Enviado al backend con √©xito: {response.status_code}")
    except requests.RequestException as e:
        print(f"‚ùå Error enviando al backend: {e}")

def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("‚úÖ Conectado al MQTT Broker")
        # Suscribirse a todos los t√≥picos
        for topico in TOPICOS:
            client.subscribe(topico)
            print(f"üì° Subscrito al t√≥pico: {topico}")
    else:
        print(f"‚ùå Fall√≥ la conexi√≥n con c√≥digo: {rc}")

def on_message(client, userdata, msg):
    payload = msg.payload.decode()
    print(f"üì® Mensaje MQTT recibido: {msg.topic} -> {payload}")
    enviar_al_backend(msg.topic, payload)

def main():
    client = mqtt.Client(transport="websockets")
    client.on_connect = on_connect
    client.on_message = on_message

    print(f"üîå Conectando al broker MQTT por WebSocket {BROKER}:{PUERTO}{WEBSOCKETS_PATH}...")
    while True:
        try:
            client.ws_set_options(path=WEBSOCKETS_PATH)
            client.connect(BROKER, PUERTO, 60)
            client.loop_forever()
        except Exception as e:
            print(f"‚ö†Ô∏è Error de conexi√≥n MQTT WebSocket: {e}")
            print("üîÑ Reintentando conexi√≥n en 5 segundos...")
            time.sleep(5)

if __name__ == "__main__":
    main()
